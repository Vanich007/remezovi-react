// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import {API_URL} from "../../api/api";

export interface CreatePostDto {
  title: string;
  text: string;
  author: number;
}
export interface GetPostDto {
  count: number;
}
export interface GetPostsDto {
  count: number;
}
export interface Post extends CreatePostDto {
  id: number;

}

export interface PostsApiResponse {
  posts: Post[]

}

// Define a service using a base URL and expected endpoints
export const postsApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: `${API_URL}/posts` }),
  reducerPath: "postsApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Posts"],
  endpoints: build => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getPosts: build.query<PostsApiResponse, GetPostsDto >({
      query: (params) => params && params.count ? `posts?count=${params.count}` : '',
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      // providesTags: (result, error, id) => [{ type: "Posts", id }],
    }),
    addPost: build.query({
      query: (body: CreatePostDto) => ({
        url: `${API_URL}/posts/add`,
        method: 'POST',
        body,
      }),
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useAddPostQuery, useLazyGetPostsQuery, useGetPostsQuery} = postsApiSlice
