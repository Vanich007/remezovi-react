// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import {API_URL} from "../../api/api";
import type {User} from "../../features/user/usersApiSlice";
import type {Category} from "./categoriesSlice";

export interface CreatePostDto {
  title: string;
  text: string;
  author: number | null;
  category: number
}
export interface PatchPostDto {
  id: number;
  title: string;
  text: string;
  author: number | null;
  category: number
}
export interface GetPostDto {
  id?: string;
}
export interface GetPostsDto {
  count: number;
  skip: number;
}
export interface Post {
  id: number;
  user: User;
  category: Category
  title: string;
  text: string;
  author: number | null;
}

export interface PostsApiResponse {
  posts: Post[],
  count: number,

}

// Define a service using a base URL and expected endpoints
export const postsApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: `${API_URL}/posts` }),
  reducerPath: "postsApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Posts"],
  endpoints: build => ({
    getPosts: build.query<PostsApiResponse, GetPostsDto >({
      query: (params) => params && params.count ? `posts?count=${params.count}&skip=${params.skip}` : '',
      providesTags: ['Posts'],
    }),
    getPost: build.query<Post, GetPostDto >({
      query: (params) => params && params.id ? `post?id=${params.id}` : '',
      providesTags: ['Posts'],
    }),
    addPost: build.mutation({
      query: (body: CreatePostDto) => ({
        url: `${API_URL}/posts/add`,
        method: 'POST',
        body,
      }),
      invalidatesTags: ['Posts'],
    }),
    patchPost: build.mutation({
      query: (body: CreatePostDto) => ({
        url: `${API_URL}/posts/patch`,
        method: 'PATCH',
        body,
      }),
      invalidatesTags: ['Posts'],
    }),
    deletePost: build.query({
      query: (params) => ({
        url: `${API_URL}/posts/delete?id=${params.idToDelete}`,
        method: 'DELETE',
      }),
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useDeletePostQuery,useAddPostMutation, useLazyGetPostsQuery, useGetPostsQuery, useGetPostQuery, usePatchPostMutation} = postsApiSlice
